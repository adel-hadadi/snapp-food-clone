openapi: '3.0.3'
info:
  title: Snapp Food Clone
  version: '1.0'
servers:
  - url: http://localhost/api
paths:
  /auth/otp:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendOTP"
            example:
              phone: "9919999999"
      summary: Send OTP Code to user phone number
      responses:
        '202':
          description: OK

  /auth/sellers/otp:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SellerSendOTP"
      summary: Send OTP Code to seller phone number
      responses:
        '202':
          description: OK

  /auth/login-register:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRegister"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginRegisterRes"
          description: ok

  /auth/sellers/login-register:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRegister"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginRegisterRes"
          description: ok

  /auth/refresh:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenReq"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshTokenRes"
          description: return new fresh access token

  /profile/addresses:
    get:
      security:
        - bearerAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                $ref: "#/components/schemas/AddressRes"
          description: return list of user's addresses
    post:
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddressRes"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddressRes"
          description: create new address and accosiate it to user
      
  /sellers/dashboard/stores:
    get:
      security:
        - bearerAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreRes"
          description: return list of seller's stores
    post:
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateStoreReq"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreRes"
          description: created new store and associate it to authenticated user

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      properties:
        id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
        phone:
          type: string
        
    SendOTP:
      properties:
        phone:
          type: string
      
    SellerSendOTP:
      properties:
        phone:
          type: string

    LoginRegister:
      properties:
        code:
          type: string
        phone:
          type: string
          
    TokenRes:
      properties:
        access_token:
          type: string
        refresh_toke:
          type: string

    LoginRegisterRes:
      properties:
        has_account:
          type: boolean
        token:
          $ref: "#/components/schemas/TokenRes"
      
    RefreshTokenReq:
      properties:
        refresh_token:
          type: string

    RefreshTokenRes:
      properties:
        access_token:
          type: string

    AddressRes:
      properties:
        name:
          type: string
        city_id:
          type: integer
        province_id:
          type: integer
        address:
          type: string
        detail:
          type: string
        latitude:
          type: number
        longitude:
          type: number

    StoreRes:
      properties:
        id:
          type: integer
        name:
          type: string
        slug:
          type: string
        logo:
          type: string

    CreateStoreReq:
      properties:
        name:
          type: string
        store_type_id:
          type: integer
        address:
          type: string
        city_id:
          type: integer
        logo:
          type: string